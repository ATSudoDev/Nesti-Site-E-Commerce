{% extends "base.html.twig" %}

{% block content %}

	<div id="breadCrumb-details">
		<a href="{{ base_url('/recipes')}}">
			<p>Recettes</p>
		</a>
		<p>
			&nbsp >
			{{recipe.name_recipe}}
		</p>
	</div>

	<div id="recipe-details">
		<div>
			<div id="recipe-card-details">

				<div id="recipe-img-details" style='background-image: url("https://teillier.needemand.com/realisations/Projet_Nesti/Nesti-Project-PHP/public/images/recipes/{{recipe.getImage().name_image~"."~recipe.getImage().extension_image }}");'></div>

				<div id="recipe-content-details">

					<h2 id="recipe-title-details">
						{{recipe.name_recipe}}
					</h2>

					<h3 id ="recipe-username-chief">
					proposé par {{ recipe.getUsernameChief().username_user }}
					</h3>

					<div class="recipe-card-grade">
						<div class="recipes-grade-stars">
							{% set copyGrade = recipe.getAverageGrade() %}
							{% for i in range(1,5) %}
								<span class="fa-stack" style="width:1em">
									<i class="far fa-star fa-stack-1x fa-fw"></i>
									{% if (copyGrade > 0) %}
										{% if (copyGrade >=1) %}
											<i class="fas fa-star fa-stack-1x fa-fw"></i>
										{% else %}
											<i class="fas fa-star-half fa-stack-1x fa-fw"></i>
										{% endif %}
									{% endif %}
									{% set copyGrade = (copyGrade - 1) %}
								</span>
							{% endfor %}
						</div>
						<div class="recipes-grade-out-of">
							({{ recipe.getNumberGrade() }})
						</div>
					</div>

					<div id="recipe-info">
						<div class="recipe-info-element">
							<i class="far fa-clock" aria-hidden="true"></i>
							<p>{{recipe.time_recipe}}</p>
						</div>
						<div class="recipe-info-element">
							<i class="fa fa-utensils" aria-hidden="true"></i>
							<p>{{recipe.number_person_recipe}}</p>
						</div>
						<div class="recipe-info-element">
							<i class="fa fa-fire" aria-hidden="true"></i>
							<p>{{recipe.difficulty_recipe}}</p>
						</div>
					</div>
				</div>

				<div id="ingredients-recipe">
					<div id="ingredients-recipe-title">
						Ingredients
					</div>
					<div id="ingredients-recipe-list">
						{% for ingredientRecipe in ingredientsRecipe %}
							<div class="recipe-ingredient">
								{{ingredientRecipe.quantity_ingredient~" "~ingredientRecipe.getMeasureUnit().name_measure_unit~" de "~ingredientRecipe.getProduct().name_product}}
							</div>
						{% endfor %}
					</div>
				</div>
			</div>
		</div>

		<div>
			<div id="recipe-card-preparation">
				<div id="recipe-card-preparation-title">
					Préparation
				</div>

				<div id="recipe-card-steps">
					{% for paragraph in paragraphs %}
						<div class="recipe-steps">
							<div class="recipe-step-order">Étape
								{{paragraph.order_paragraph}}</div>
							<div class="recipe-step-content">{{paragraph.content_paragraph}}</div>
						</div>
					{% endfor %}
				</div>

			</div>
		</div>
	</div>


	<div id="recipe-others">

		<div id="recipe-comments">
			<div id="recipe-comments-title">
				Commentaires ({{ comments|length}})
			</div>

			<div id="recipe-comments-content">

				{% for comment in comments %}

					<div class="recipe-comment">
						<div class="recipe-comment-header">
							<div class="recipe-comment-title">
								{{comment.title_comment}}
							</div>
							<div class="recipe-comment-user">
								par
								{{comment.getUser().username_user}}
							</div>
							<div class="recipe-comment-date">
								({{comment.date_creation_comment|date("m/d/Y H:m:s")}})
							</div>
						</div>

						<div class="recipe-comment-content">{{comment.content_comment}}</div>
					</div>
				{% endfor %}
			</div>
		</div>

		<div id="recipe-interactions">
			{% if session.logged_in == true %}
				<div id="write-comments">
					<div class="alert alert-success" id="alert-comment" onclick="hideAlert(this)" hidden>Votre commentaire a bien été enregistré</div>
					<div class="alert alert-danger" id="alert-comment-already" onclick="hideAlert(this)" hidden>Vous avez déjà commenté cette recette</div>

					<div id="write-comments-title">
						Écrire un commentaire
					</div>

					<div id="form-send-comment">
						{{ form_open(base_url(), {id :"form-write-comment"})}}
						<input id="write-comment-title" name="title-comment" placeholder="Titre du commentaire" type='text'>
						<span class="text-danger" id="errorCommentTitle"></span>
						<textarea id="write-comment-area" rows="5" max-length="50" style="resize: none;" name="content-comment" placeholder="Écrivez votre commentaire ici !"></textarea>
						<span class="text-danger" id="errorCommentText"></span>
						<button type="submit" id="btn-send-comment">Envoyer</button>
						{{ form_close() }}
					</div>
				</div>

				<div id="give-grade">
					<div class="alert alert-success" id="alert-grade" onclick="hideAlert(this)" hidden>Votre note a bien été enregistré</div>
					<div class="alert alert-danger" id="alert-grade-already" onclick="hideAlert(this)" hidden>Vous avez déjà noté cette recette</div>

					<div id="recipe-grade-title">
						Noter la recette
					</div>
					<form id="form-give-grade">
						<div id="give-grade-recipe-stars">

							{% for i in range(0,4) %}
								<span data-value={{5-i}} class="fa-stack give-grade">
									&#9734
								</span>
							{% endfor %}

						</div>
					</form>
				</div>

			{% else %}
				<div id="write-comments">
					<div id="write-comments-title">
						Pour envoyer un commentaire ou noter cette recette
					</div>
					<a href="{{ base_url('/user')}}">
						<button type="submit" id="btn-goes-connection">Se connecter</button>
					</a>
				</div>
			{% endif %}
		</div>
	</div>

{% endblock %}

{% block script %}
	<script>

	// BROWSE HISTORY

	var id_recipe = {{ recipe.id_recipe }};
	var name = "{{recipe.name_recipe}}";
	var image = "{{ recipe.getImageDir() }}";
	var averageGrade = {{ recipe.getAverageGrade() }};
	var numberGrade = {{ recipe.getNumberGrade() }};
	var time = "{{recipe.time_recipe}}"
	var person = {{recipe.number_person_recipe}}
	var difficulty = {{recipe.difficulty_recipe}}

	var objRecipe = {
		"id_recipe": id_recipe,
		"name": name,
		"image": image,
		"averageGrade": averageGrade,
		"numberGrade": numberGrade,
		"time": time,
		"person": person,
		"difficulty": difficulty
	}

	oldHistory = [];

	if (JSON.parse(localStorage.getItem("history")) != null) {
		oldHistory = [JSON.parse(localStorage.getItem("history"))].flat();
	}

	if (oldHistory.length == 0) {

		const firstRecipe = [].concat(objRecipe);
		localStorage.setItem("history", JSON.stringify(firstRecipe));

		} else {

			var newHistory = [];
			newHistory = oldHistory.flat();

			const idList = oldHistory.map(el => {
				return el.id_recipe;
			});

			index = idList.indexOf({{ recipe.id_recipe }});
			
			if (index != -1) { 
				newHistory.splice(index, 1);
			}

			newHistory.unshift(objRecipe);
			
			if (newHistory.length == 5) {
				newHistory.splice(4, 1);
			}

			localStorage.setItem("history", JSON.stringify(newHistory))
	}
		
		

	// AJAX SEND FORM COMMENT

const csrf = document.querySelector('input[name="csrf_nesti"]');

buttonComment = document.querySelector("#btn-send-comment");

if (typeof(buttonComment) != 'undefined' && buttonComment != null) {

buttonComment.addEventListener('click', (function (e) {

formComment = document.querySelector("#form-write-comment");

event.preventDefault();

addComment(formComment).then((response) => {
if (response) {
if (response.success && response.csrf_token) {

alertComment = document.querySelector("#alert-comment");
alertComment.removeAttribute("hidden");

document.querySelector("#write-comment-title").value = "";
document.querySelector("#write-comment-area").value = "";

document.querySelector("#errorCommentTitle").innerHTML = "";
document.querySelector("#errorCommentText").innerHTML = "";

} else {
if (response.validation[0]) {
alertCommentAlready = document.querySelector("#alert-comment-already");
alertCommentAlready.removeAttribute("hidden");

document.querySelector("#write-comment-title").value = "";
document.querySelector("#write-comment-area").value = "";


} else {
document.querySelector("#errorCommentTitle").innerHTML = response.validation['title-comment'] || "";
document.querySelector("#errorCommentText").innerHTML = response.validation['content-comment'] || "";
}

}

// Refresh CSRF
csrf.setAttribute('value', response.csrf_token);
}
});

}))

}


/**
		* Ajax request to add a comment
		* @param obj form
		* @returns mixed
		*/
async function addComment(obj) {

var myHeaders = new Headers();

let formData = new FormData(obj);

var myInit = {
method: 'POST',
headers: myHeaders,
mode: 'cors',
cache: 'default',
body: formData
};

let response = await fetch('{{ base_url() }}/recipe/{{ recipe.id_recipe }}/comment', myInit);
try {
if (response.ok) {
return await response.json();
} else {
return false;
}
} catch (e) {
console.error(e.message);
}
};

// AJAX SEND FORM GRADE

grades = document.querySelectorAll(".give-grade");

grades.forEach((element, index) => element.addEventListener('click', (function (e) {

var grade = element.getAttribute("data-value");
addGrade(grade).then((response) => {
if (response) {
if (response.success && response.csrf_token) {

alertGrade = document.querySelector("#alert-grade");
alertGrade.removeAttribute("hidden");

recipeCardGrade = document.querySelector(".recipe-card-grade");
recipeCardGrade.innerHTML = '';

var recipesGradeStars = document.createElement("div");
recipesGradeStars.className = "recipes-grade-stars";
recipesGradeStars.innerHTML = "";

var recipesGradeOutOf = document.createElement("div");
recipesGradeOutOf.className = "recipes-grade-out-of";
recipesGradeOutOf.innerHTML = "(" + response.numberGrades + ")";

var averageGrade = response.averageGrade;

	for (var x = 0; x < 5; x++) {

		var span = document.createElement("span");
		span.className = "fa-stack";
		span.style.width = "1.25em"

		var i = document.createElement("i");
		i.className = "far fa-star fa-stack-1x fa-fw";

		span.appendChild(i);

		if (averageGrade > 0 ) {
			console.log(averageGrade);
			if (averageGrade >= 1 ) {

				var i2 = document.createElement("i");
					i2.className = "fas fa-star fa-stack-1x fa-fw";
					span.appendChild(i2);
			} else {
				var i3 = document.createElement("i");
					i3.className = "fas fa-star-half fa-stack-1x fa-fw";
					span.appendChild(i3);
			}

		}

		recipesGradeStars.appendChild(span);
		averageGrade = ( averageGrade - 1)
	}

recipeCardGrade.appendChild(recipesGradeStars);
recipeCardGrade.appendChild(recipesGradeOutOf);				

} else {

alertGrade = document.querySelector("#alert-grade");
alertGrade.setAttribute("hidden", "");
alertGradeAlready = document.querySelector("#alert-grade-already");
alertGradeAlready.removeAttribute("hidden");

}

// Refresh CSRF

csrf.setAttribute('value', response.csrf_token);
}
});

})))

/** *Ajax request to add a grade
 *@param obj form 
 *@returns mixed 
 */
async function addGrade(grade) {

var myHeaders = new Headers();
let formData = new FormData();

formData.append('grade', grade);
formData.append(csrf.name, csrf.value);

var myInit = {
method: 'POST',
headers: myHeaders,
mode: 'cors',
cache: 'default',
body: formData
};

let response = await fetch('{{ base_url() }}/recipe/{{ recipe.id_recipe }}/grade', myInit);
try {
if (response.ok) {
return await response.json();
} else {
return false;
}
} catch (e) {
console.error(e.message);
}
};

function hideAlert(el) {
var alert = el;
alert.setAttribute("hidden", "");
};

</script>
	{% endblock %}
